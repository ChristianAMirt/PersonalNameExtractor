plugins {
    id 'java'
    id 'jacoco'
    id 'application'
    id 'org.ajoberstar.git-publish' version '4.2.0'
    id "com.github.spotbugs" version "5.0.6"
       id 'org.unbroken-dome.test-sets' version '4.0.0'

}

java {
    sourceCompatibility = JavaVersion.toVersion(11)
    targetCompatibility = JavaVersion.toVersion(11)
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.0'
    testImplementation 'org.hamcrest:hamcrest-library:2.2'
    implementation 'nz.ac.waikato.cms.weka:weka-stable:3.8.6'

    // systemTestImplementation 'org.junit.jupiter:junit-jupiter:5.7.0'
    // systemTestImplementation 'org.hamcrest:hamcrest-library:2.2'
}

application {
    mainClass = 'edu.odu.cs.cs350.PNE'
}

test {
    ignoreFailures = true
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        }
} 

testSets { systemTest }

tasks.withType(Test) {
    ignoreFailures = true
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        }
}

systemTest.mustRunAfter test

spotbugsSystemTest.enabled = false

task systest{
    systest.dependsOn(systemTest)
}


spotbugsMain {
    ignoreFailures = true
    effort = 'max'
    reportLevel = 'medium'
    reports {
       xml.enabled = false
       html.enabled = true
    }
}

spotbugsTest.enabled = false


task copyHTML(type: Copy){
    copyHTML.dependsOn(build)
    copyHTML.dependsOn(javadoc)
    from 'src/main/html/'
    into 'build/reports/'
}

task copyDocs(type: Copy){
    copyDocs.dependsOn(javadoc)
    copyDocs.dependsOn(build)
    from 'build/docs/'
    into 'build/reports/'
}

task reports{
    reports.dependsOn(systest)
    reports.dependsOn(copyHTML)
    reports.dependsOn(copyDocs)
    reports.dependsOn(jacocoTestReport)
    reports.dependsOn(spotbugsMain)
}

gitPublish{

    // the repository
    repoUri = 'git@github.com:Old-Dominion-Univ-CS350/cs350-project-s24-ChristianAMirt.git'
    

    // branch in which to publish
    branch = 'gh-pages'

    // what to publish
    contents{
        from 'build/reports/'
    }
}

task deployReports{
    deployReports.dependsOn(reports)
    deployReports.dependsOn(gitPublishPush)
    group = "Reporting"
}

gitPublishCopy.dependsOn reports

task trainModel(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'edu.odu.cs.cs350.TrainModel'
}

task demo1(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'edu.odu.cs.cs350.PNE'
    args '<NER> Tom took a trip to the Grand Canyon last week </NER>'
}

task demo2(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'edu.odu.cs.cs350.PNE'
    args '<NER> Jason Lee </NER>'
}

task demo3(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'edu.odu.cs.cs350.PNE'
    args '<NER> This line should not include any PER tags. Here is a list of things that should not be flagged. New York, Houston, United Stated Of America, Sir, Dr, Ms, Mr. </NER>'
}


// If you want to run the program currently, type: 

// If in root
// ./gradlew run --args='"<NER> Joe Smith should have a nametag. Joey Wheeler should also have a nametag. Sytax Sages should not have a nametag.</NER>"'

//If in project
// ../gradlew run --args='"<NER> Joe Smith should have a nametag. Joey Wheeler should also have a nametag. Sytax Sages should not have a nametag.</NER>"'